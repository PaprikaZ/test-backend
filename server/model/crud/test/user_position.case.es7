const _ = require('lodash')
    , should = require('chai').should()
    , enm = require('../../../lib/enum.es7')
    , tD = require('./user_position.data.es7')
    , crudError = require('../../../lib/crud_error.es7')
    , userPositionCrud = require('../user_position/index.es7').raw;


describe('Model Crud User Position', () => {
    before((done) => tD.reset(done));

    describe('Read', () => {
        describe('Find By Id', () => {
            const { findById } = userPositionCrud;

            it('should return error if upstream caught error');
            it('should reject if guard fail');

            it('should return none if not exist', (done) => {
                findById(
                    tD.dt.justNow,
                    tD.userPosition.notExist.id,
                    (err, userPosition) => {
                        should.not.exist(err);
                        should.not.exist(userPosition);
                        done();
                    }
                );
            });

            it('should return document if exist', (done) => {
                findById(
                    tD.dt.justNow,
                    tD.userPosition.single.id,
                    (err, userPosition) => {
                        should.not.exist(err);
                        userPosition.should.have.property('_id', tD.userPosition.single.id);
                        done();
                    }
                );
            });
        });

        describe('Find Nearby Limited By Position Coordinates', () => {
            const { findNearbyLimitedByPointCoordinates } = userPositionCrud;

            it('should return error if upstream caught error');
            it('should reject if guard fail');

            it('should return none if no nearby record exist', (done) => {
                findNearbyLimitedByPointCoordinates(
                    tD.dt.justNow,
                    tD.userPosition.notExist.last.coordinates,
                    tD.metric.nearbyDistance.max,
                    (err, userPositionList) => {
                        should.not.exist(err);
                        _.isArray(userPositionList).should.be.true;
                        _.isEmpty(userPositionList).should.be.true;
                        done();
                    }
                );
            });

            it('should return result if nearby record amount in limit', (done) => {
                findNearbyLimitedByPointCoordinates(
                    tD.dt.justNow,
                    tD.userPosition.nearbyGroup.normal.a.last.coordinates,
                    tD.metric.nearbyDistance.max,
                    (err, userPositionList) => {
                        should.not.exist(err);
                        _.isArray(userPositionList).should.be.true;
                        userPositionList.should.have.property(
                            'length', _.keys(tD.userPosition.nearbyGroup.normal).length
                        );
                        done();
                    }
                );
            });

            it('should return truncated result if nearby record amount over limit', (done) => {
                findNearbyLimitedByPointCoordinates(
                    tD.dt.justNow,
                    tD.userPosition.nearbyGroup.huge.center.last.coordinates,
                    tD.metric.nearbyDistance.max,
                    (err, userPositionList) => {
                        should.not.exist(err);
                        _.isArray(userPositionList).should.be.true;
                        userPositionList.should.have.property(
                            'length', tD.userPosition.nearbyGroup.huge.list.length - 1
                        );
                        done();
                    }
                );
            });
        });

        describe('Find Nearby Un Limited By Position Coordinates', () => {
            const { findNearbyUnLimitedByPointCoordinates } = userPositionCrud;

            it('should return error if upstream caught error');
            it('should reject if guard fail');

            it('should return none if no nearby record exist', (done) => {
                findNearbyUnLimitedByPointCoordinates(
                    tD.dt.justNow,
                    tD.userPosition.notExist.last.coordinates,
                    tD.metric.nearbyDistance.max,
                    (err, userPositionList) => {
                        should.not.exist(err);
                        _.isArray(userPositionList).should.be.true;
                        _.isEmpty(userPositionList).should.be.true;
                        done();
                    }
                );
            });

            it('should return result if nearby record amount little', (done) => {
                findNearbyUnLimitedByPointCoordinates(
                    tD.dt.justNow,
                    tD.userPosition.nearbyGroup.normal.a.last.coordinates,
                    tD.metric.nearbyDistance.max,
                    (err, userPositionList) => {
                        should.not.exist(err);
                        _.isArray(userPositionList).should.be.true;
                        userPositionList.should.have.property(
                            'length', _.keys(tD.userPosition.nearbyGroup.normal).length
                        );
                        done();
                    }
                );
            });

            it('should return result if nearby record amount huge', (done) => {
                findNearbyUnLimitedByPointCoordinates(
                    tD.dt.justNow,
                    tD.userPosition.nearbyGroup.huge.center.last.coordinates,
                    tD.metric.nearbyDistance.max,
                    (err, userPositionList) => {
                        should.not.exist(err);
                        _.isArray(userPositionList).should.be.true;
                        userPositionList.should.have.property(
                            //HINT including centric record, so plus one
                            'length', tD.userPosition.nearbyGroup.huge.list.length + 1
                        );
                        done();
                    }
                );
            });
        });
    });

    describe('Create', () => {
        describe('Create', () => {
            const { create } = userPositionCrud;

            it('should return error if upstream caught error');
            it('should reject if guard fail');

            it('should fail if id exist', (done) => {
                create(
                    tD.dt.justNow,
                    tD.userPosition.single.id,
                    (err, newUserPosition) => {
                        should.exist(err);
                        should.not.exist(newUserPosition);
                        err.should.deep.equal(crudError.create(
                            enm.crudOperation.CREATE, enm.crudResult.FAIL_FALLBACK
                        ));
                        done();
                    }
                );
            });

            it('should pass if everything ok', (done) => {
                create(
                    tD.dt.justNow,
                    tD.userPosition.toCreate.id,
                    (err, newUserPosition) => {
                        should.not.exist(err);
                        should.exist(newUserPosition);
                        newUserPosition.should.have.property('_id', tD.userPosition.toCreate.id);
                        done();
                    }
                );
            });
        });
    });

    describe('Delete', () => {
        describe('Delete By Id', () => {
            const { deleteById } = userPositionCrud;

            it('should return error if upstream caught error');
            it('should reject if guard fail');

            it('should fail if id not exist', (done) => {
                deleteById(
                    tD.dt.justNow,
                    tD.userPosition.notExist.id,
                    (err, deletedUserPosition) => {
                        should.exist(err);
                        should.not.exist(deletedUserPosition);
                        err.should.deep.equal(crudError.create(
                            enm.crudOperation.DELETE, enm.crudResult.FAIL_FALLBACK
                        ));
                        done();
                    }
                );
            });

            it('should pass if id exist', (done) => {
                deleteById(
                    tD.dt.justNow,
                    tD.userPosition.toDelete.id,
                    (err, deletedUserPosition) => {
                        should.not.exist(err);
                        should.exist(deletedUserPosition);
                        done();
                    }
                );
            });
        });
    });

    describe('Update', () => {
        describe('Overwrite Position By Id', () => {
            const { overwritePositionById } = userPositionCrud;

            it('should return error if upstream caught error');
            it('should reject if guard fail');

            it('should pass if position not exist', (done) => {
                overwritePositionById(
                    tD.dt.justNow,
                    tD.userPosition.notExist.id,
                    tD.userPosition.single.last.coordinates,
                    (err) => {
                        should.exist(err);
                        err.should.deep.equal(crudError.create(
                            enm.crudOperation.UPDATE, enm.crudResult.FAIL_FALLBACK
                        ));
                        done();
                    }
                );
            });

            it('should pass if position exist', (done) => {
                const newCoordinates = [
                    tD.userPosition.single.last.coordinates[0] - 0.001,
                    tD.userPosition.single.last.coordinates[1],
                ];

                overwritePositionById(
                    tD.dt.justNow,
                    tD.userPosition.single.id,
                    newCoordinates,
                    (err) => {
                        should.not.exist(err);
                        done();
                    }
                );
            });
        });
    });
});