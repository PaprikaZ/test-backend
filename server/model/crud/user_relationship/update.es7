const s = require('./schema.es7')
    , logging = require('../../../lib/logging.es7')
    , flowEvent = require('../../lib/flow_event.es7')
    , modName = require('../../../../lib/module_name.es7')
    , { emitEvent } = require('../../lib/flow_controller.es7')
    , flowController = require('../../lib/flow_controller.es7')
    , { normalize: ccn, transform: cct } = require('../../lib/crud_callback.es7');


const moduleName = modName.generateServer(__dirname, __filename)
    , log = logging.getLoggerModule(moduleName)
    , onEvent = flowController.getOnEvent(moduleName);


const UserRelationship = s.model;


const addActiveFollowingById = (queryDateTime, userId, followingUserId, callback) =>
    UserRelationship.updateOne(
        {
            '_id': userId,
            'active.following.user.list': { $not: { $elemMatch: { id: followingUserId } } },
        },
        {
            $inc: { 'active.following.user.count.total': 1 },
            $push: {
                'active.following.user.list': {
                    $position: 0,
                    $each: [{ id: followingUserId }],
                }
            }
        },
        ccn(log, 'addActiveFollowingById', [cct.updateOne], (err) => {
            err || emitEvent(
                flowEvent.USER_RELATIONSHIP_USER_FOLLOWING_ADDED,
                queryDateTime, userId, followingUserId
            );
            callback(err);
        })
    );


const removeActiveFollowingById = (queryDateTime, userId, followingUserId, callback) =>
    UserRelationship.updateOne(
        {
            '_id': userId,
            'active.following.user.list': { $elemMatch: { id: followingUserId } }
        },
        {
            $inc: { 'active.following.user.count.total': -1 },
            $pull: { 'active.following.user.list': { id: followingUserId } },
        },
        ccn(log, 'removeActiveFollowingById', [cct.updateOne], (err) => {
            err || emitEvent(
                flowEvent.USER_RELATIONSHIP_USER_FOLLOWING_REMOVED,
                queryDateTime, userId, followingUserId
            );
            callback(err);
        })
    );


const addPassiveFollowingById = (queryDateTime, userId, followerId, callback) =>
    UserRelationship.updateOne(
        {
            '_id': userId,
            'passive.following.user.list': { $not: { $elemMatch: { id: followerId } } },
        },
        {
            $inc: { 'passive.following.user.count.total': 1 },
            $push: {
                'passive.following.user.list': {
                    $position: 0,
                    $each: [{ id: followerId }],
                }
            }
        },
        ccn(log, 'addPassiveFollowingById', [cct.updateOne], callback)
    );

onEvent(
    flowEvent.USER_RELATIONSHIP_USER_FOLLOWING_ADDED,
    'addPassiveFollowingById',
    (queryDateTime, userId, followingUserId) => (cb) =>
        addPassiveFollowingById(queryDateTime, followingUserId, userId, cb)
);


const removePassiveFollowingById = (queryDateTime, userId, followerId, callback) =>
    UserRelationship.updateOne(
        {
            '_id': userId,
            'passive.following.user.list': { $elemMatch: { id: followerId } },
        },
        {
            $inc: { 'passive.following.user.count.total': -1 },
            $pull: { 'passive.following.user.list': { id: followerId } },
        },
        ccn(log, 'removePassiveFollowingById', [cct.updateOne], callback)
    );

onEvent(
    flowEvent.USER_RELATIONSHIP_USER_FOLLOWING_REMOVED,
    'removePassiveFollowingById',
    (queryDateTime, userId, followingUserId) => (cb) =>
        removePassiveFollowingById(queryDateTime, followingUserId, userId, cb)
);


module.exports = {
    addActiveFollowingById: addActiveFollowingById,
    addPassiveFollowingById: addPassiveFollowingById,
    removeActiveFollowingById: removeActiveFollowingById,
    removePassiveFollowingById: removePassiveFollowingById,
};
