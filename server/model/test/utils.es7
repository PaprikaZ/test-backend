const _ = require('lodash')
    , should = require('chai').should();


const getDropCollection = (dbEntity, collectionName) => (callback) =>
    dbEntity.connection.collections[collectionName].drop((err) => {
        err && err.should.have.property('message', 'ns not found');
        callback();
    });


const getFromSeedOperationGroup = (Model) => {
    const generateFromSeed = (seed, callback) =>
        new Model(seed).save((err, newDocument) => {
            should.not.exist(err);
            newDocument.should.have.property('_id');
            callback(null, newDocument);
        });

    const generateFromSeedList = (seedList, callback) => {
        if (_.isEmpty(seedList)) return callback();

        const [firstSeed, ...restSeedList] = seedList;

        generateFromSeed(firstSeed, () => generateFromSeedList(restSeedList, callback));
    };

    return [generateFromSeed, generateFromSeedList];
};


const createFlowShould = (delayTime) => (initialEntry, sideEffectValidationTask, callback) =>
    async.series(
        [
            (cb) => initialEntry(cb),
            (cb) => setTimeout(cb, delayTime),
            ...sideEffectValidationTask,
        ],
        callback
    );


module.exports = {
    createFlowShould: createFlowShould,
    getDropCollection: getDropCollection,
    getFromSeedOperationGroup: getFromSeedOperationGroup,
};