const axios = require('axios')
    , should = require('chai').should()
    , mock = require('../../../test/mock.es7')
    , enm = require('../../../../lib/enum.es7')
    , { markFail } = require('../../../../lib/test.es7')
    , crudError = require('../../../../lib/crud_error.es7')
    , { option: { api: { json: queryOption } } } = require('../../../test/query.es7');


describe('Web Route Api Account Registration', () => {
    describe('Sign Up Name Nick', () => {
        it('should res 400 if req token illegal');
        it('should res 401 if req token invalid');
        it('should res 500 if error unhandled');

        //
        it('should res 400 if req payload illegal', (done) => {
            axios.post(
                '/sign-up',
                { illegal: {} },
                queryOption
            )
            .then(
                (res) => { markFail(); },
                (err) => { err.response.should.have.property('status', 400); }
            )
            .then(() => done(), (err) => done(err));
        });

        it('should res 400 if upstream param nick name invalid', (done) => {
            const testUserNickName = 'Kinopico';

            mock.crud(
                'user.createNameNick',
                (nickName, callback) => {
                    should.exist(nickName);
                    nickName.should.equal(testUserNickName);
                    callback(crudError.create(enm.crudOperation.NONE, enm.crudResult.FAIL_GUARD));
                }
            );

            axios.post(
                '/sign-up',
                { reg: { nameNick: testUserNickName } },
                queryOption
            )
            .then(
                (res) => { markFail(); },
                (err) => { err.response.should.have.property('status', 400); }
            )
            .then(() => done(), (err) => done(err));
        });

        it('should res 403 if upstream nick name already registered', (done) => {
            const testUserNickName = 'Kinopico';

            mock.crud(
                'user.createNameNick',
                (nickName, callback) => {
                    should.exist(nickName);
                    nickName.should.equal(testUserNickName);
                    callback(crudError.create(enm.crudOperation.CREATE, enm.crudResult.FAIL_DOC_ALREADY_CREATED));
                }
            );

            axios.post(
                '/sign-up',
                { reg: { nameNick: testUserNickName } },
                queryOption
            )
            .then(
                (res) => { markFail(); },
                (err) => { err.response.should.have.property('status', 403); }
            )
            .then(() => done(), (err) => done(err));
        });

        it('should res 200 if everything ok', (done) => {
            const testUserId = 'fadd85b4079cb409'
                , testUserNickName = 'Kinopico'
                , testQueryDateTime = new Date();

            const testNewUser = {
                id: testUserId,
                createAt: testQueryDateTime,
                nameNick: testUserNickName,
            };

            mock.crud(
                'user.createNameNick',
                (nickName, callback) => {
                    should.exist(nickName);
                    nickName.should.equal(testUserNickName);
                    callback(null, testNewUser);
                }
            );

            axios.post(
                '/sign-up',
                { reg: { nameNick: testUserNickName } },
                queryOption
            )
            .then(
                (res) => {
                    res.should.have.property('status', 200);
                    res.data.should.equal('');
                },
                (err) => { markFail(); }
            )
            .then(() => done(), (err) => done(err));
        });
    });

    describe('Delete Acount', () => {
        it('should res 400 if req token illegal');
        it('should res 401 if req token invalid');
        it('should res 500 if error unhandled');

        //
        it('should res 404 if upstream account not found');
        it('should res 200 if everything ok');
    });
});
