const _ = require('lodash')
    , b = require('../../binding.es7')
    , enm = require('../../../lib/enum.es7')
    , logging = require('../../../lib/logging.es7')
    , modName = require('../../../../lib/module_name.es7')
    , { isErrorCommon, handleErrorCommon, handleErrorUnhandled } = require('../lib/common.es7');


const moduleName = modName.generateServer(__dirname, __filename)
    , log = logging.getLoggerModule(moduleName);


const getMyProfile = {
    method: 'get',
    path: '/my/profile',
    middleware: [],
    handle: (routeName) => (req, res) => {
        //TODO
        //const user = req[cfg.jwt.middleware.requestMountField];

        return res.status(200).end();

        //SAMEPLE
        b.crud.i.user.findById(
            null, //user.id
            (err, user) => {
                if (err && isErrorCommon(err)) return handleErrorCommon(routeName, err, res);
                if (err) return handleErrorUnhandled(routeName, res);
                if (!user) return res.status(404).end();

                res.status(200).json({ data: { me: {
                    createAt: user.createAt,
                    birthDay: user.dateBirth,
                    description: user.description,
                    homeAddress: user.homeAddress.text,
                } } });
            }
        );
    },
};


const setMyProfileHomeAddress = {
    method: 'post',
    //path: '/my/profile/home/address',
    path: '/my/profile/address',
    middleware: [],
    handle: (routeName) => (req, res) => {
        //TODO
        //const user = req[cfg.jwt.middleware.requestMountField];

        if (!req.body || !_.get(req.body, 'new.homeAddress'))
            return res.status(400).end();

        b.crud.i.user.setHomeAddressById(
            req.body.new.homeAddress,
            null, //user.id
            (err) => {
                if (err && isErrorCommon(err)) return handleErrorCommon(routeName, err, res);
                if (err &&
                    (err.operation === enm.crudOperation.UPDATE) &&
                    (err.result === enm.crudResult.FAIL_CRITERIA_VIOLATION_INTERVAL_MIN))
                    return res.status(403).end();
                if (err) return handleErrorUnhandled(routeName, res);

                res.status(200).end();
            }
        );
    },
};


const updateMyProfileHomeAddress = {
    method: 'put',
    //path: '/my/profile/home/address',
    path: '/my/profile/address',
    middleware: [],
    handle: (routeName) => (req, res) => {
        //TODO
        //const user = req[cfg.jwt.middleware.requestMountField];

        if (!req.body || !_.get(req.body, 'new.homeAddress'))
            return res.status(400).end();

        b.crud.i.user.updateHomeAddressById(
            req.body.new.homeAddress,
            null, //user.id
            (err) => {
                if (err && isErrorCommon(err)) return handleErrorCommon(routeName, err, res);
                if (err &&
                    (err.operation === enm.crudOperation.UPDATE) &&
                    (err.result === enm.crudResult.FAIL_FIELD_ALREADY_SET))
                    return res.status(403).end();
                if (err) return handleErrorUnhandled(routeName, res);

                res.status(200).end();
            }
        );
    },
};


const setMyProfileBirthDay = {
    method: 'post',
    path: '/my/profile/birth_day',
    middleware: [],
    handle: (routeName) => (req, res) => {
        //TODO
        //const user = req[cfg.jwt.middleware.requestMountField];

        if (!req.body || !_.get(req.body, 'new.dateBirth'))
            return res.status(400).end();

        b.crud.i.user.setDateBirthById(
            req.body.new.dateBirth,
            null, //user.id
            (err) => {
                if (err && isErrorCommon(err)) return handleErrorCommon(routeName, err, res);
                if (err &&
                    (err.operation === enm.crudOperation.UPDATE) &&
                    (err.result === enm.crudResult.FAIL_FIELD_ALREADY_SET))
                    return res.status(403).end();
                if (err) return handleErrorUnhandled(routeName, res);

                res.status(200).end();
            }
        );
    },
};


const setMyProfileDescription = {
    method: 'post',
    path: '/my/profile/description',
    middleware: [],
    handle: (routeName) => (req, res) => {
        //TODO
        //const user = req[cfg.jwt.middleware.requestMountField];

        if (!req.body || !_.get(req.body, 'new.description'))
            return res.status(400).end();

        b.crud.i.user.setDescriptionById(
            req.body.new.description,
            null, //user.id
            (err) => {
                if (err && isErrorCommon(err)) return handleErrorCommon(routeName, err, res);
                if (err &&
                    (err.operation === enm.crudOperation.UPDATE) &&
                    (err.result === enm.crudResult.FAIL_FIELD_ALREADY_SET))
                    return res.status(403).end();
                if (err) return handleErrorUnhandled(routeName, res);

                res.status(200).end();
            }
        );
    },
};


const updateMyProfileDescription = {
    method: 'put',
    path: '/my/profile/description',
    middleware: [],
    handle: (routeName) => (req, res) => {
        //TODO
        //const user = req[cfg.jwt.middleware.requestMountField];

        if (!req.body || !_.get(req.body, 'new.description'))
            return res.status(400).end();

        b.crud.i.user.updateDescriptionById(
            req.body.new.description,
            null, //user.id
            (err) => {
                if (err && isErrorCommon(err)) return handleErrorCommon(routeName, err, res);
                if (err &&
                    (err.operation === enm.crudOperation.UPDATE) &&
                    (err.result === enm.crudResult.FAIL_FIELD_NOT_EXIST))
                    return res.status(403).end();
                if (err) return handleErrorUnhandled(routeName, res);

                res.status(200).end();
            }
        );
    },
};


module.exports = {
    getMyProfile: getMyProfile,
    setMyProfileBirthDay: setMyProfileBirthDay,
    setMyProfileHomeAddress: setMyProfileHomeAddress,
    updateMyProfileHomeAddress: updateMyProfileHomeAddress,
    setMyProfileDescription: setMyProfileDescription,
    updateMyProfileDescription: updateMyProfileDescription,
};
